stages:
  - build
  - afterBuilt

variables:
  # 用于 build, buildWithPub, afterBuildWithPub
  OSS_RESOURCE_BASE_URL    : oss://zhuyun-static-files-production/dataflux-func/resource
  OSS_PORTABLE_BASE_URL    : oss://zhuyun-static-files-production/dataflux-func/portable
  OSS_ENDPOINT             : http://oss-cn-hangzhou-internal.aliyuncs.com
  IMAGE                    : dataflux-func
  IMAGE_PRIVATE            : registry.jiagouyun.com/middlewares/dataflux-func
  IMAGE_PUBLIC             : pubrepo.jiagouyun.com/dataflux-func/dataflux-func
  IMAGE_FILE               : dataflux-func.tar
  DOCKER_STACK_EXAMPLE_FILE: docker-stack.example.yaml
  RUN_DOCKER_STACK_FILE    : run-docker-stack.sh
  README_FILE              : README.md

  # 用于buildSaaS, buildPaaS_prod, buildPaaS_prod
  REPOSITORY  : dataflux-func
  PROJECT     : dataflux-func
  FUNC_PKG_URL: https://zhuyun-static-files-production.oss-cn-hangzhou.aliyuncs.com/dataflux-func/market/packages/_dataflux/dataflux-func-latest.func-pkg

# SaaS开发/预发/生产版
#   主要用于驻云SaaS版开发/预发/生产环境
build:
  stage: build
  only:
    - dev
    - /^release_\d+_\d+$/ # 如：release_20190101_01
    - /^pre_\d+_\d+$/     # 如：pre_20190101_01
  script:
    - python echo-image-info.py > image-info.json
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
    - docker push ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
    - mkdir -p func-pkg; wget ${FUNC_PKG_URL} -O func-pkg/dataflux.func-pkg # 下载内置库
  tags:
    - middleware-prod

# 公开发布版
#   主要用于独立安装
buildWithPub:
  stage: build
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    - python echo-image-info.py > image-info.json
    - V_PARTS=(${CI_COMMIT_REF_NAME//[\.]/ })
    - V_MAJOR=${V_PARTS[0]}
    - V_MAJOR_MINOR=${V_PARTS[0]}.${V_PARTS[1]}
    - V_MAJOR_MINOR_PATCH=${V_PARTS[0]}.${V_PARTS[1]}.${V_PARTS[2]}
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:latest
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:latest
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:${V_MAJOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:${V_MAJOR_MINOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:${V_MAJOR_MINOR_PATCH}
    - docker push ${IMAGE_PRIVATE}:latest
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR}
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
    - docker push ${IMAGE_PUBLIC}:latest
    - docker push ${IMAGE_PUBLIC}:${V_MAJOR}
    - docker push ${IMAGE_PUBLIC}:${V_MAJOR_MINOR}
    - docker push ${IMAGE_PUBLIC}:${V_MAJOR_MINOR_PATCH}
  tags:
    - middleware-prod

# 携带版
#   主要用于创建携带版OSS资源文件
afterBuildWithPub:
  stage: afterBuilt
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    - docker save ${IMAGE_PUBLIC}:latest > ${IMAGE_FILE}
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_RESOURCE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${RUN_DOCKER_STACK_FILE}     ${OSS_RESOURCE_BASE_URL}/${RUN_DOCKER_STACK_FILE}     -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${README_FILE}               ${OSS_RESOURCE_BASE_URL}/${README_FILE}               -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${IMAGE_FILE}                ${OSS_PORTABLE_BASE_URL}/${IMAGE_FILE}                -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_PORTABLE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}

# PaaS 预发
buildPaaS_prev:
  stage: build
  only:
    - /\d+\.\d+\.\d+\.\d+-\w+-prev/ # 如：1.10.49.1-c2f4e3b-prev
  script:
    - python echo-image-info.py > image-info.json
    - V=(${CI_COMMIT_REF_NAME//[\.-]/ })
    - VDIR=${V[0]}.${V[1]}.${V[2]}.${V[3]}
    - REPO=dataflux-prev/$VDIR
    - TAG=${PROJECT}-${V[4]}
    - docker build -t $REPO:$TAG .
    - docker tag $REPO:$TAG pubrepo.jiagouyun.com/$REPO:$TAG
    - docker push pubrepo.jiagouyun.com/$REPO:$TAG
  tags:
    - middleware-prod

# PaaS 生产
buildPaaS_prod:
  stage: build
  only:
    - /\d+\.\d+\.\d+-\w+-\d+-prod/ # 如： 1.9.48-356017d-1600314708-prod
  script:
    - python echo-image-info.py > image-info.json
    - V=(${CI_COMMIT_REF_NAME//[\.-]/ })
    - VDIR=${V[0]}.${V[1]}.${V[2]}
    - REPO=dataflux/$VDIR
    - TAG=${PROJECT}-${V[3]}-${V[4]}
    - docker build -t $REPO:$TAG .
    - docker tag $REPO:$TAG pubrepo.jiagouyun.com/$REPO:$TAG
    - docker push pubrepo.jiagouyun.com/$REPO:$TAG
  tags:
    - middleware-prod
