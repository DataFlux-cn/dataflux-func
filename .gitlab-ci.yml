stages:
  - build
  - afterBuilt

variables:
  OSS_RESOURCE_BASE_URL    : oss://zhuyun-static-files-production/dataflux-func/resource
  OSS_PORTABLE_BASE_URL    : oss://zhuyun-static-files-production/dataflux-func/portable
  OSS_ENDPOINT             : http://oss-cn-hangzhou-internal.aliyuncs.com
  IMAGE                    : dataflux-func
  IMAGE_PRIVATE            : registry.jiagouyun.com/middlewares/dataflux-func
  IMAGE_PUBBLIC            : pubrepo.jiagouyun.com/dataflux-func/dataflux-func
  IMAGE_FILE               : dataflux-func.tar
  DOCKER_STACK_EXAMPLE_FILE: docker-stack.example.yaml
  RUN_DOCKER_STACK_FILE    : run-docker-stack.sh
  README_FILE              : README.md

build:
  stage: build
  only:
    - dev
    - preprod
    - /^release_\d+_\d+$/ # 如：release_20190101_01
    - /^pre_\d+_\d+$/     # 如：pre_20190101_01
  script:
    - python echo-image-info.py > image-info.json
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
    - docker push ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
  tags:
    - middleware-prod

buildWithPub:
  stage: build
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    - python echo-image-info.py > image-info.json
    - V_PARTS=(${CI_COMMIT_REF_NAME//[\.]/ })
    - V_MAJOR=${V_PARTS[0]}
    - V_MAJOR_MINOR=${V_PARTS[0]}.${V_PARTS[1]}
    - V_MAJOR_MINOR_PATCH=${V_PARTS[0]}.${V_PARTS[1]}.${V_PARTS[2]}
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:latest
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBBLIC}:latest
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBBLIC}:${V_MAJOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBBLIC}:${V_MAJOR_MINOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBBLIC}:${V_MAJOR_MINOR_PATCH}
    - docker push ${IMAGE_PRIVATE}:latest
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR}
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
    - docker push ${IMAGE_PUBBLIC}:latest
    - docker push ${IMAGE_PUBBLIC}:${V_MAJOR}
    - docker push ${IMAGE_PUBBLIC}:${V_MAJOR_MINOR}
    - docker push ${IMAGE_PUBBLIC}:${V_MAJOR_MINOR_PATCH}
  tags:
    - middleware-prod

afterBuilt:
  stage: afterBuilt
  script:
    - docker save ${IMAGE}:${CI_COMMIT_REF_NAME} > ${IMAGE_FILE}
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_RESOURCE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${RUN_DOCKER_STACK_FILE}     ${OSS_RESOURCE_BASE_URL}/${RUN_DOCKER_STACK_FILE}     -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${README_FILE}               ${OSS_RESOURCE_BASE_URL}/${README_FILE}               -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_PORTABLE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${IMAGE_FILE}                ${OSS_PORTABLE_BASE_URL}/${IMAGE_FILE}                -f -e ${OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
